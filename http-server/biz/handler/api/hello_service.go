// Code generated by hertz generator.

package api

import (
	"context"
	"log"

	"github.com/tim-pipi/cloudwego-api-gateway/http-server/kitex_gen/hello"
	"github.com/tim-pipi/cloudwego-api-gateway/http-server/kitex_gen/hello/echo"

	kclient "github.com/cloudwego/kitex/client"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/tim-pipi/cloudwego-api-gateway/http-server/biz/model/api"
)

// HelloMethod .
// @router /hello [GET]
func HelloMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.HelloReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// TODO: Other processing logic here

	// Use Kitex client to make RPC to backend service
	client, err := echo.NewClient("hello", kclient.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		log.Fatal("create client failed:", err)
		return
	}

	// Construct the RPC Request
	rpcReq := &hello.Request{
		Message: req.Name,
	}

	// Make the RPC
	rpcResp, err := client.Echo(ctx, rpcReq)
	if err != nil {
		log.Fatal("remote procedure call failed:", err)
		return
	}

	// Construct the HTTP response
	resp := &api.HelloResp{
		RespBody: "hello, " + rpcResp.Message,
	}

	c.JSON(consts.StatusOK, resp)
}
