// Code generated by hertz generator.

package main

import (
	// "context"
	// "log"
	// "encoding/json"

	// "github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"

	// "github.com/cloudwego/hertz/pkg/common/utils"
	// "github.com/cloudwego/hertz/pkg/protocol/consts"

	// kclient "github.com/cloudwego/kitex/client"
	// "github.com/cloudwego/kitex/client/genericclient"
	// "github.com/cloudwego/kitex/pkg/generic"
	// "github.com/cloudwego/kitex/pkg/klog"
)

type HelloReq struct {
	Name string `json:"name"`
}

func main() {
	h := server.Default(
		server.WithHostPorts("127.0.0.1:8080"),
	)

	register(h)

	// h.GET("/hello", func(c context.Context, ctx *app.RequestContext) {
	// 	idlPath := "../idl/hello_api.thrift"
	// 	p, err := generic.NewThriftFileProvider(idlPath)
	// 	if err != nil {
	// 		klog.Fatalf("new thrift file provider failed: %v", err)
	// 	}

	// 	g, err := generic.JSONThriftGeneric(p)
	// 	if err != nil {
	// 		klog.Fatalf("new http pb thrift generic failed: %v", err)
	// 	}

	// 	cli, err := genericclient.NewClient("hello", g, kclient.WithHostPorts("127.0.0.1:8888"))
	// 	if err != nil {
	// 		klog.Fatalf("new http generic client failed: %v", err)
	// 	}

	// 	name, _ := ctx.GetQuery("name")
	// 	log.Println("name: ", name)

	// 	resp, err := cli.GenericCall(c, "HelloMethod", utils.H{"name": name})

	// 	if err != nil {
	// 		klog.Fatalf("remote procedure call failed: %v", err)
	// 		return
	// 	}

	// 	ctx.JSON(consts.StatusOK, resp)
	// })

	h.Spin()
}
