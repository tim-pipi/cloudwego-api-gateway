{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CloudWeGo API Gateway Documentation","text":"<p>Welcome to the documentation for CloudWeGo API Gateway!</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The CloudWeGo API Gateway is a powerful and lightweight API gateway, designed to deliver high performance and scalability. It is built on top of Kitex and Hertz, providing a seamless integration of their capabilities.</p>"},{"location":"#key-features","title":"Key Features","text":"<ol> <li> <p>HTTP Request Handling: The API Gateway is designed to accept HTTP requests with JSON-encoded bodies, making it easy for clients to communicate with the backend services.</p> </li> <li> <p>Generic-Call with Kitex: Leveraging the power of Kitex's Generic-Call feature, the API Gateway seamlessly translates JSON requests into Thrift binary format. This ensures efficient communication and compatibility between the client and backend services.</p> </li> <li> <p>Load Balancing: To achieve optimal performance and reliability, the API Gateway integrates a robust load balancing mechanism.    It efficiently distributes incoming requests among multiple backend RPC servers, ensuring even utilisation of resources.</p> </li> <li> <p>Service Registry and Discovery: The API Gateway and RPC servers are seamlessly integrated with a service registry and discovery mechanism, using etcd.</p> </li> <li> <p>Kitex-based RPC Servers: As part of the project requirements, we have developed backend RPC servers using Kitex.</p> </li> <li> <p>Observability: The CloudWeGo API Gateway is equipped with observability features,    allowing developers to gain valuable insights into the system's behavior and performance.</p> </li> </ol> <p>The CloudWeGo API Gateway project is built with a focus on ease of use. With these key features in place, developers can confidently build and deploy robust microservices architectures, enhancing the overall efficiency of their applications.</p>"},{"location":"#installation","title":"Installation","text":"<p>To get started with CloudWeGo API Gateway, follow the setup instructions in the Setup Guide</p>"},{"location":"#feedback-and-support","title":"Feedback and Support","text":"<p>We value your feedback! If you have any questions or encounter any issues while using CloudWeGo API Gateway, please file an issue on our GitHub page.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>TODO</p>"},{"location":"setup/","title":"Getting started","text":"<p>Welcome to the guide for getting started with the CloudWeGo API Gateway! This page will walk you through setting up and running the API Gateway using simple examples from the <code>/examples</code> directory. You have the flexibility to run the API Gateway locally or within a Docker container.</p>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Before you get started, ensure that you have the following installed on your development machine:</p> <ul> <li>Go v1.20.0 or higher</li> <li>Docker</li> <li>Kitex</li> <li>Hertz</li> <li>thrift-gen-validator</li> </ul>"},{"location":"setup/#docker","title":"Docker","text":"<p>The easiest way to get started with the CloudWeGo API Gateway is to run one of the examples from the <code>/examples</code> directory.</p>"},{"location":"setup/#step-1-clone-repository","title":"Step 1: Clone Repository","text":"<p>To start, clone this repository:</p> <pre><code>$ git clone https://github.com/tim-pipi/cloudwego-api-gateway.git\n$ cd cloudwego-api-gateway/examples/hello\n</code></pre>"},{"location":"setup/#step-2-launch-docker","title":"Step 2: Launch Docker","text":"<p>Launch the Docker container:</p> <pre><code>$ docker-compose up\n[+] Running 3/3\n \u2714 Container hello-etcd-1         Created                                                                          0.0s\n \u2714 Container hello-rpc-server-1   Recreated                                                                        0.1s\n \u2714 Container hello-http-server-1  Recreated                                                                        0.1s\n# ...\n</code></pre>"},{"location":"setup/#step-3-test-the-api-gateway","title":"Step 3: Test the API Gateway","text":"<p>In a separate terminal window, test the API Gateway by making a <code>GET</code> request.</p> <pre><code>$ curl http://localhost:8080/ping\nHello, CloudWeGo!\n</code></pre>"},{"location":"setup/#running-locally","title":"Running locally","text":"<p>When running locally, you need to ensure that the following dependencies are installed.</p> <ul> <li>etcd for Service Registry</li> <li>Optional: Postman, Insomnia, or Hurl for API testing</li> </ul>"},{"location":"setup/#step-1-start-the-service-registry","title":"Step 1: Start the Service Registry","text":"<p>Start <code>etcd</code> to initiate the service registry.</p> <pre><code>$ etcd --advertise-client-urls http://etcd:2379 --listen-client-urls http://127.0.0.1:2379\n</code></pre>"},{"location":"setup/#step-2-set-environemnt-variables","title":"Step 2: Set Environemnt Variables","text":"<p>Set the required environment variables for the API Gateway.</p> <pre><code>$ export IDL_DIR=\"$(pwd)/tests/hello/idl\"\n$ export LOG_PATH=\"$(pwd)/tests/hello/output.log\"\n</code></pre>"},{"location":"setup/#step-3-start-the-api-gateway","title":"Step 3: Start the API Gateway","text":"<pre><code>$ go run cmd/cloudwego/main.go start\n# ...\n{\"level\":\"info\",\"msg\":\"HERTZ: Using network library=netpoll\",\"time\":\"2023-07-14T12:37:35+08:00\"}\n{\"level\":\"info\",\"msg\":\"HERTZ: HTTP server listening on address=[::]:8080\",\"time\":\"2023-07-14T12:37:35+08:00\"}\n</code></pre>"},{"location":"setup/#step-4-start-the-rpc-server","title":"Step 4: Start the RPC Server","text":"<pre><code>$ cd examples/hello/rpc-server\n$ go run .\n</code></pre>"},{"location":"setup/#step-5-test-the-api-gateway","title":"Step 5: Test the API Gateway","text":"<p>In a separate terminal window, test the API Gateway by making a <code>GET</code> request:</p> <pre><code>$ curl http://localhost:8080/ping\nHello, CloudWeGo!\n</code></pre> <p>Alternatively, you can use <code>hurl</code> to run tests.</p> <pre><code>$ cd tests/hello\n$ hurl --test hello_service_test.hurl\nhello_service_test.hurl: Running [1/1]\nhello_service_test.hurl: Success (6 request(s) in 20 ms)\n--------------------------------------------------------------------------------\nExecuted files:  1\nSucceeded files: 1 (100.0%)\nFailed files:    0 (0.0%)\nDuration:        23 ms\n</code></pre> <p>Congratulations! You have successfully set up and run the CloudWeGo API Gateway using the provided examples. You are now ready to explore the capabilities of the API Gateway and start building powerful APIs for your applications.</p>"},{"location":"tutorials/","title":"Adding Services","text":"<p>Welcome to CloudWeGo API Gateway!</p> <p>In this guide, we'll walk you through the process of creating your first service with our API Gateway. The CloudWeGo API Gateway operates using the Thrift IDL format, which allows you to define the structure of the request and response objects, as well as the service interface.</p> <p>Before we begin, ensure that you have followed the instructions on the Setup page.</p>"},{"location":"tutorials/#adding-services_1","title":"Adding Services","text":"<p>In this section, we will guide you on how to add services to the CloudWeGo API Gateway and properly organize your Thrift IDL files.</p>"},{"location":"tutorials/#setting-up-the-idl-directory","title":"Setting up the IDL directory","text":"<p>Before adding services, it is crucial to have a designated directory to store all your Thrift IDL files. To create this directory and set it as an environment variable, follow these steps in your terminal:</p> <pre><code>$ mkdir idl\n$ export IDL_DIR=\"$(pwd)/idl\"\n</code></pre> <p>Note</p> <p>Your IDL files have to follow the Thrift IDL Annotation Standard for Kitex.</p>"},{"location":"tutorials/#creating-your-first-service-echo-service","title":"Creating your first service: Echo Service","text":"<p>To demonstrate the process of adding a service, we will create a simple service named \"EchoService.\" Copy and paste the following code into a new file named /idl/echo.thrift:</p> <pre><code>namespace go api\n\nstruct EchoReq {\n1:required string message\n}\n\nstruct EchoResp {\n1: string response\n}\n\nservice EchoService {\nEchoResp echo(1: EchoReq request) (api.get=\"/EchoService/echo\")\n}\n</code></pre>"},{"location":"tutorials/#understanding-the-idl-file","title":"Understanding the IDL file","text":"<p>The /idl/echo.thrift file defines the \"EchoService\" with its request and response structures. Let's go through the code:</p> Code Explanation <code>struct EchoReq...</code> Defines the structure representing the request object for the \"Echo\" operation. <code>struct EchoResp...</code> Defines the structure representing the response object for the \"Echo\" operation. <code>service EchoService...</code> Declares the service interface named \"EchoService\" that includes various operations. <code>(api.get=\"/EchoService/echo\")</code> Specifies the path for the HTTP GET request to access the \"echo\" operation of the \"EchoService\"."},{"location":"tutorials/#generating-the-rpc-server-using-kitex","title":"Generating the RPC Server using Kitex","text":"<p>To generate the scaffolding code for the Kitex RPC server, follow these steps:</p> <p>Create a new directory named <code>/rpc-server</code>.</p> <p>Run the <code>cwgo gen</code> command with the <code>-i</code> flag to specify the path to the Thrift IDL file, and the <code>-m</code> flag to set the module name:</p> <pre><code>$ cwgo gen -i idl/echo.thrift -m {MODULE_NAME}\nAdding apache/thrift@v0.13.0 to go.mod for generated code .......... Done\n</code></pre> <p>After running the command, the /rpc-server directory will contain the following files and subdirectories:</p> <pre><code>\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 handler.go\n\u251c\u2500\u2500 idl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 echo.thrift\n\u251c\u2500\u2500 kitex-template\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 handler_tpl.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main_tpl.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 middleware_tpl.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 readme_tpl.yaml\n\u251c\u2500\u2500 kitex_gen\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 api\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 echo.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 echo_validator.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 echoservice\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 client.go\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 echoservice.go\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 invoker.go\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 server.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 k-consts.go\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 k-echo.go\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 middleware\n    \u2514\u2500\u2500 middleware.go\n</code></pre> <p>Note</p> <p>The <code>cwgo</code> command-line tool is a wrapper for the <code>kitex</code> command-line tool. It is used to generate the scaffolding code for the Kitex RPC servers using the a custom template for the API Gateway.</p> <p>The <code>kitex</code> tool will generate the following <code>handler.go</code> file:</p> <pre><code>// EchoServiceImpl implements the last service interface defined in the IDL.\ntype EchoServiceImpl struct{}\n\n// Echo implements the EchoServiceImpl interface.\nfunc (s *EchoServiceImpl) Echo(ctx context.Context, request *api.EchoReq) (resp *api.EchoResp, err error) {\n// TODO: Your code here...\nreturn\n}\n</code></pre>"},{"location":"tutorials/#updating-handlers","title":"Updating handlers","text":"<p>In the <code>handler.go</code> file, fill in the logic for the Echo method:</p> <pre><code>// EchoServiceImpl implements the last service interface defined in the IDL.\ntype EchoServiceImpl struct{}\n\n// Echo implements the EchoServiceImpl interface.\nfunc (s *EchoServiceImpl) Echo(ctx context.Context, request *api.EchoReq) (resp *api.EchoResp, err error) {\nresp = &amp;api.EchoResp{\nResponse: request.Message,\n}\nreturn\n}\n</code></pre>"},{"location":"tutorials/#starting-the-api-gateway","title":"Starting the API Gateway","text":"<p>To quickly get the API Gateway up and running, we recommend using Docker, which streamlines the deployment process.</p> <p>Copy and paste the following <code>docker-compose.yml</code> file and start the API Gateway:</p> <pre><code>version: \"3.9\" # Docker version\nservices:\n# etcd is used for service registration and discovery\netcd:\nimage: quay.io/coreos/etcd:v3.5.0\ncommand:\n[\n\"etcd\",\n\"--advertise-client-urls\",\n\"http://etcd:2379\",\n\"--listen-client-urls\",\n\"http://0.0.0.0:2379\",\n]\nports:\n- \"2379:2379\"\n# http-server is the API Gateway which is pulled as a Docker image from Docker Hub\nhttp-server:\nimage: czsheng/cloudwego-api-gateway\nvolumes:\n- idl/:/etc/idl\n- gateway-logs:/logs\nenvironment:\n- ETCD_ADDR=http://etcd:2379\n- LOGFILE=/logs/http-server.log\n# Port forwarding configuration for API Gateway\nports:\n- \"8080:8080\"\ndepends_on:\n- etcd\n# Code for RPC server\nrpc-server:\nbuild: rpc-server\nenvironment:\n- ETCD_URL=http://etcd:2379\n- CONTAINER=rpc-server\n- LOGFILE=/logs/rpc-server.log\nvolumes:\n- gateway-logs:/logs\nports:\n- \"8888:8888\"\ndepends_on:\n- etcd\n# Save logs to a persistent volume\nvolumes:\ngateway-logs:\n</code></pre>"},{"location":"tutorials/#configuration","title":"Configuration","text":"<p>To customise the configuration, see the Configuration page.</p>"},{"location":"tutorials/#testing-the-api-gateway","title":"Testing the API Gateway","text":"<p>To test your API Gateway, you can use various HTTP client tools such as Insomnia, Postman, or Hurl. Follow the steps below to test the API Gateway with a simple RPC server.</p>"},{"location":"tutorials/#step-1-sending-a-get-request","title":"Step 1: Sending a GET Request","text":"<ol> <li> <p>Start the API Gateway and the RPC server by running <code>docker-compose up</code>.</p> </li> <li> <p>Open your preferred HTTP client tool (e.g., Insomnia, Postman, or Hurl).</p> </li> <li> <p>Set the method to <code>GET</code>.</p> </li> <li> <p>Enter the following URL as the request endpoint: <code>http://localhost:8080/EchoService/echo</code>.</p> </li> </ol>"},{"location":"tutorials/#step-2-json-request-body","title":"Step 2: JSON Request Body","text":"<ol> <li>In the request body section of your HTTP client, provide the following JSON body:</li> </ol> <pre><code>{\n\"message\": \"Hello!\"\n}\n</code></pre>"},{"location":"tutorials/#step-3-receiving-the-response","title":"Step 3: Receiving the Response","text":"<ol> <li> <p>Send the GET request by clicking the \"Send\" or \"Run\" button in your HTTP client.</p> </li> <li> <p>You should receive the following JSON response:</p> </li> </ol> <pre><code>{\n\"response\": \"Hello!\"\n}\n</code></pre> <p>Congratulations! You have successfully set up the CloudWeGo API Gateway with a simple RPC server, and the test confirms that it is functioning correctly. If you encounter any issues or have questions, refer to the documentation or seek help from the community. Happy building!</p>"},{"location":"tutorials/configuration/","title":"Configuration","text":"<p>The CloudWeGo API Gateway reads its configuration from environment variables. These environment variables allow you to customize the behavior of the API Gateway based on your specific needs. Here are the available environment variables:</p>"},{"location":"tutorials/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"tutorials/configuration/#idl_dir","title":"<code>$IDL_DIR</code>","text":"<ul> <li>Description: The directory containing the Interface Definition Language (IDL) files.</li> <li>Usage: The IDL files define the structure of the request and response objects, as well as the service interface. The API Gateway uses these IDL files to understand the structure of the incoming requests and outgoing responses. Setting this variable ensures that the API Gateway knows where to find the IDL files for your services.</li> </ul>"},{"location":"tutorials/configuration/#etcd_addr","title":"<code>$ETCD_ADDR</code>","text":"<ul> <li>Description: The address of the etcd server.</li> <li>Usage: etcd is used for service registration and discovery in the API Gateway. The API Gateway needs to know the address of the etcd server to perform these tasks. By setting this variable, you specify the etcd server's location, allowing the API Gateway to connect to it.</li> </ul>"},{"location":"tutorials/configuration/#log_level","title":"<code>$LOG_LEVEL</code>","text":"<ul> <li>Description: The log level for the API Gateway.</li> <li>Usage: Logging is essential for monitoring the API Gateway's behavior and diagnosing issues. By setting the log level, you control the verbosity of the logs generated by the API Gateway. You can choose from different log levels, such as \"info,\" \"warn,\" \"error,\" or \"debug,\" depending on the level of detail you need in your logs.</li> </ul>"},{"location":"tutorials/configuration/#log_path","title":"<code>$LOG_PATH</code>","text":"<ul> <li>Description: The path to the log file.</li> <li>Usage: By setting the log path, you specify where the API Gateway should write its log messages. Storing logs in a specific file allows you to manage and analyze the log data separately from other output.</li> </ul>"},{"location":"tutorials/configuration/#allow_metrics","title":"<code>$ALLOW_METRICS</code>","text":"<ul> <li>Description: A flag to enable metrics.</li> <li>Usage: Metrics provide valuable insights into the performance and health of the API Gateway. By setting this flag to true, you enable the collection and reporting of various metrics, such as request latency, error rates, and throughput. These metrics can help you monitor the API Gateway's performance and identify potential bottlenecks or issues.</li> </ul>"},{"location":"tutorials/configuration/#example-usage","title":"Example Usage","text":""},{"location":"tutorials/configuration/#running-locally","title":"Running locally","text":"<p>To configure the API Gateway with these environment variables, you can set them when starting the API Gateway service. Here's an example of how to start the API Gateway with custom configuration:</p> <pre><code>$ IDL_DIR=\"/path/to/idl_files\"\n$ ETCD_ADDR=\"localhost:2379\"\n$ LOG_LEVEL=\"debug\"\n$ LOG_PATH=\"/var/log/cloudwego-api-gateway.log\"\n$ ALLOW_METRICS=true\n\n$ cwgo start\n</code></pre>"},{"location":"tutorials/configuration/#using-docker","title":"Using Docker","text":"<p>Alternatively, if you prefer using docker-compose to manage your services, you can set the environment variables directly in your docker-compose.yml file. Here's how you can do it:</p> <pre><code>version: \"3.9\" # Docker version\nservices:\n# ...\nhttp-server:\nimage: czsheng/cloudwego-api-gateway\nvolumes:\n- ../../tests/hello/idl/:/etc/idl\nenvironment:\nIDL_DIR: /path/to/idl_files\nETCD_ADDR: http://etcd:2379\nLOG_LEVEL: debug\nLOG_PATH: /var/log/cloudwego-api-gateway.log\nALLOW_METRICS: \"true\"\nports:\n- \"8080:8080\"\ndepends_on:\n- etcd\n# ...\n</code></pre>"},{"location":"tutorials/guidelines/","title":"Guidelines","text":"<p>TODO</p>"},{"location":"tutorials/observability/","title":"Observability","text":""},{"location":"tutorials/observability/#setup","title":"Setup","text":"<p>To enable observability and gain valuable insights into the API Gateway's behavior and performance, follow these steps.</p> <p>Open a terminal and navigate to the observability directory in your project:</p> <pre><code>$ cd observability\n</code></pre> <p>Start the necessary services using Docker Compose:</p> <pre><code>$ docker-compose up\nWARN[0000] The \"OTELCOL_ARGS\" variable is not set. Defaulting to a blank string.\n[+] Running 4/0\n \u2714 Container victoriametrics                    Running                                                            0.0s\n \u2714 Container observability-grafana-1            Running                                                            0.0s\n \u2714 Container observability-jaeger-all-in-one-1  Running                                                            0.0s\n \u2714 Container observability-otel-collector-1     Running                                                            0.0s\n</code></pre>"},{"location":"tutorials/observability/#traces","title":"Traces","text":"<p>To view the traces generated by API requests, open your web browser and navigate to http://localhost:16686. This URL will take you to the Jaeger UI, where you can explore distributed traces and identify potential bottlenecks or latency issues.</p>"},{"location":"tutorials/observability/#metrics","title":"Metrics","text":"<p>To visualize and analyze various metrics, including request rates, latencies, and error rates, access the Grafana UI. Open your web browser and navigate to http://localhost:3000.</p>"},{"location":"tutorials/observability/#add-data-source","title":"Add data source","text":"<p>Follow the <code>kitex-example</code> guide on adding a data source.</p>"},{"location":"tutorials/observability/#import-dashboard","title":"Import dashboard","text":"<p>After setting up the data source, you can import the provided <code>dashboard.json</code> file to visualize the API Gateway's key metrics. This dashboard basic overview of system performance and resource utilisation.</p>"},{"location":"tutorials/observability/#additional-resources","title":"Additional Resources","text":"<p>For further insights into the metrics provided and detailed information on observability in the CloudWeGo API Gateway, refer to the following repositories:</p> <ul> <li>hertz obs-opentelemetry</li> <li>kitex obs-opentelemetry</li> </ul>"},{"location":"tutorials/testing/","title":"Testing","text":""},{"location":"tutorials/testing/#api-testing","title":"API Testing","text":"<p>Validate your API endpoints to ensure they respond as expected. You can use either Postman or Insomnia for manual testing.</p>"},{"location":"tutorials/testing/#hurl","title":"Hurl","text":"<p>For automated API testing, utilise Hurl by executing the following command:</p> <pre><code>$ cd tests\n$ hurl --test hello_service_test.hurl\nhello_service_test.hurl: Running [1/1]\nhello_service_test.hurl: Success (6 request(s) in 12 ms)\n--------------------------------------------------------------------------------\nExecuted files:  1\nSucceeded files: 1 (100.0%)\nFailed files:    0 (0.0%)\nDuration:        15 ms\n</code></pre>"},{"location":"tutorials/testing/#load-tests","title":"Load Tests","text":"<p>Ensure your API Gateway's performance under high traffic by conducting load tests. First, install K6 and then, run the load tests using the following command:</p> <pre><code>$ cd tests\n$ k6 run load.js\n\n          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   \u203e\u203e\\\n/          \\   |  |\\  \\ |  (\u203e)  |\n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\nscript: load.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 100 max VUs, 1m0s max duration (incl. graceful stop):\n           * default: 100 looping VUs for 30s (gracefulStop: 30s)\n\n\nrunning (0m03.6s), 100/100 VUs, 300 complete and 0 interrupted iterations\ndefault   [===&gt;----------------------------------] 100 VUs  03.6s/30s\n</code></pre>"},{"location":"tutorials/testing/#integration-tests","title":"Integration Tests","text":"<p>Automate your integration tests using the workflows provided in this repository.</p> <p>Here's a sample integration test script that you can add to your project:</p> <pre><code>#!/bin/bash\nset -eu\n\nwait_for_url() {\necho \"Testing $1...\"\necho -e \"GET $1\\nHTTP 200\" | hurl --retry $2 &gt;/dev/null\n    return 0\n}\n\necho \"Starting Integration Test\"\ndocker-compose -f ./examples/hello/docker-compose.yml up -d\ndocker-compose -f ./examples/hello/docker-compose.yml logs\nwhile ! docker network inspect hello_default &gt;/dev/null 2&gt;&amp;1; do sleep 1; done\n\necho \"Waiting for Docker instance to be ready...\"\nwait_for_url 'http://localhost:8080/ping' 60\nsleep 5\n\necho \"Running Hurl tests\"\nhurl --test tests/hello/*.hurl\n\necho \"Stopping Docker container\"\ndocker-compose -f ./examples/hello/docker-compose.yml down\n</code></pre> <p>Additionally, add the following workflow to your GitHub Actions configuration to run the integration tests on push and pull request events targeting the default branch and the <code>testing</code> branch:</p> <pre><code>name: ci\non:\n  push:\n    branches: [$default-branch, testing]\n  pull_request:\n    branches: [$default-branch, testing]\npermissions:\n  contents: write\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Unit Test\n        run: go test -v ./...\n\n      - name: Integration Test\n        run: |\n          # Install Hurl\n          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/4.0.0/hurl_4.0.0_amd64.deb\n          sudo dpkg -i hurl_4.0.0_amd64.deb\n          tests/integration.sh\n</code></pre> <p>With these integration tests and the CI workflow, you can ensure that your CloudWeGo API Gateway functions correctly and reliably, catching any potential issues early in the development process.</p>"},{"location":"tutorials/updating-services/","title":"Updating Services","text":"<p>In your API Gateway, file changes are tracked using the fsnotify library, which allows for efficient monitoring of changes in the file system.</p>"},{"location":"tutorials/updating-services/#adding-new-idls","title":"Adding new IDLs","text":"<p>To add a new Interface Definition Language (IDL) for your services, follow these steps:</p> <ol> <li> <p>Write your new IDL file: Begin by creating a new IDL file that defines the interface for your desired services.</p> </li> <li> <p>Transfer it into your IDL Directory: Once you have written the IDL file, transfer it into the designated IDL Directory of your API Gateway. This directory serves as a repository for all IDL files.</p> </li> <li> <p>Validation of the IDL: The API Gateway will automatically validate the new IDL file to ensure it adheres to the required syntax and structure. If the IDL is valid, the client will be updated with the new services, making them available for use.</p> </li> <li> <p>Handling invalid IDLs: In case the new IDL file is found to be invalid during validation, you will need to review and rewrite it until it conforms to the correct IDL specifications. Once the issues are resolved, repeat the steps to add the updated IDL to your API Gateway.</p> </li> </ol>"},{"location":"tutorials/updating-services/#modifying-existing-idls","title":"Modifying existing IDLs","text":"<p>If you need to make changes to an existing IDL to update or extend the services in your API Gateway, follow these steps:</p> <ol> <li> <p>Open your existing IDL file: Locate and open the IDL file that you want to modify using a text editor or an integrated development environment (IDE).</p> </li> <li> <p>Edit the IDL file: Make the necessary changes to the IDL file, ensuring that the modifications adhere to the valid IDL syntax and do not introduce any errors.</p> </li> <li> <p>Validation of the modified IDL: After editing the IDL file, the API Gateway will perform a validation check on the modified IDL. If the changes are valid, the client will be automatically updated with the new services reflecting the modifications.</p> </li> <li> <p>Handling invalid IDLs: If the modified IDL contains errors or does not meet the required IDL specifications, you will need to correct the issues and revalidate the IDL. Repeat this process until the IDL file is valid and the services are updated accordingly.</p> </li> </ol> <p>By following these steps, you can effectively add new IDLs or modify existing ones to update the services offered by your API Gateway.</p> <p>Last but not least, update the logic in <code>handler.go</code>.</p>"},{"location":"tutorials/updating-services/#service-registration-and-discovery","title":"Service Registration and Discovery","text":"<p>Service registration and discovery is done using etcd and the <code>registry-etcd</code> library.</p>"}]}