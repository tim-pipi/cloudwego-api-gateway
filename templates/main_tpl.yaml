path: main.go
update_behavior:
  type: skip
body: |-
  package main

  import (
    "fmt"
    "sync"

    "github.com/cloudwego/kitex/pkg/rpcinfo"
    "github.com/cloudwego/kitex/server"
    etcd "github.com/kitex-contrib/registry-etcd"

    "github.com/cloudwego/kitex/pkg/klog"

    {{ToLower .Namespace}} "{{.ImportPath}}/{{ToLower .ServiceName}}"

    "{{.Module}}/middleware"
    "{{.Module}}/pkg/utils"
  )

  // Constants for testing purposes
  const NUMSERVERS = 5
  const DEFAULT_ETCD_PORT = 2380

  func main() {
    // Create the service registry
    r, err := etcd.NewEtcdRegistry([]string{fmt.Sprintf("localhost:%d", DEFAULT_ETCD_PORT)}) // r should not be reused.
    if err != nil {
      klog.Error(err.Error())
    }

    var wg sync.WaitGroup
    counter := new(utils.Counter)

    // Creates a new RPC server for the HelloService
    create{{.ServiceName}}Server := func() {
      defer wg.Done()
      count := counter.Increment()

      addr, err := utils.FindAvailablePort()
      if err != nil {
        klog.Error(err.Error())
        panic(err)
      }

      svr := {{ToLower .Namespace}}.NewServer(
        new({{.ServiceName}}Impl),
        server.WithRegistry(r),
        server.WithServerBasicInfo(&rpcinfo.EndpointBasicInfo{
          ServiceName: "{{.ServiceName}}",
        }),
        server.WithServiceAddr(addr),
        server.WithMiddleware(middleware.MiddleWareLogger(fmt.Sprintf("{{.ServiceName}}: Server %d called", count))),
        server.WithMiddleware(middleware.ValidatorMW),
      )

      if err := svr.Run(); err != nil {
        klog.Error(err.Error())
      }
    }

    wg.Add(NUMSERVERS)
    for i := 0; i < NUMSERVERS; i++ {
      go create{{.ServiceName}}Server()
    }

    wg.Wait()
  }